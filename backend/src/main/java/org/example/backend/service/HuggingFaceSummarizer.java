package org.example.backend.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;

@Service
public class HuggingFaceSummarizer {

    private final RestTemplate restTemplate;
    private final String flaskApiUrl;
    private final ObjectMapper objectMapper;

    public HuggingFaceSummarizer(RestTemplate restTemplate, @Value("${flask.api.url:http://localhost:5000}") String flaskApiUrl) {
        this.restTemplate = restTemplate;
        this.flaskApiUrl = flaskApiUrl;
        this.objectMapper = new ObjectMapper();
    }

    public String summarizePdf(MultipartFile file) throws IOException {
        if (file == null || file.isEmpty()) {
            throw new IllegalArgumentException("No file provided or file is empty");
        }

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.MULTIPART_FORM_DATA);

        MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
        body.add("file", new FileSystemResource(convertMultipartFileToFile(file)));

        HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);

        try {
            String endpoint = flaskApiUrl.endsWith("/") ? flaskApiUrl + "summarize" : flaskApiUrl + "/summarize";
            System.out.println("Sending request to Flask API: " + endpoint);
            ResponseEntity<String> response = restTemplate.postForEntity(
                    endpoint,
                    requestEntity,
                    String.class
            );

            if (response.getStatusCode() != HttpStatus.OK) {
                throw new IOException("Flask API returned status: " + response.getStatusCode() + ", body: " + response.getBody());
            }

            String responseBody = response.getBody();
            JsonNode jsonNode = objectMapper.readTree(responseBody);
            if (jsonNode.has("error")) {
                throw new IOException("Flask API error: " + jsonNode.get("error").asText());
            }
            if (!jsonNode.has("summary")) {
                throw new IOException("Flask API response missing 'summary' field: " + responseBody);
            }

            String summary = jsonNode.get("summary").asText();
            if (summary.isEmpty() || summary.contains("No summary found")) {
                return "No valid summary generated by Flask API";
            }
            return summary.replace("\\n", " ");
        } catch (Exception e) {
            throw new IOException("Error communicating with Flask API: " + e.getMessage(), e);
        }
    }

    private File convertMultipartFileToFile(MultipartFile file) throws IOException {
        File tempFile = File.createTempFile("pdf_", ".pdf");
        file.transferTo(tempFile);
        tempFile.deleteOnExit();
        return tempFile;
    }

    public String summarize(String inputText) {
        if (inputText == null || inputText.trim().isEmpty()) {
            return "No summary found: Input text is empty";
        }
        return "Existing text summarization logic";
    }
}